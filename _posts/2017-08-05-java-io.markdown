---
layout:     post
title:      "Java Generic Types"
subtitle:   "泛型简介"
iframe:     ""
navcolor:   "invert"
author:     "Bonismo"
date:       2017-07-28
header-img: "img/java/hello-world-banner.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 泛型
    - 类型安全
    - 类型检查
    - 简化代码
---

### 流

- Java 可以对文件进行操作，以`流`的方式进行。

    `流`是 Java 内存中一组有序队列。Java 从源（网络、文件、键盘、硬盘）读入
    到内存中，这个过程就形成了`流`。

### IO

- input 输入

- output 输出

`简称 IO`

### 面向字节`[` Byte `]`、面向字符`[` Character `]`

- 面向字节 InputStream、OutputStream 及其所有子类 `以8为单位对二进制数据操作，对数据不转换`

- 面向字符 Reader、Writer 及其所有子类 `以字符为单位对数据进行操作，读的时候将二进制转换为字符，写的时候转为二进制数据`

### 面向输出方向 `方向相对程序而言`

- 输入 InputStream、Reader

- 输出 OutputStream、Writer

### Java IO 类图

<div>
    <img src="https://github.com/StayHungryStayFoolish/stayhungrystayfoolish.github.io/blob/master/img/java/io.png?raw=true"  />
</div>

`带 Buffer 的都是缓存输出、输入，效率高。`

`InputStreamReader 是字节通向字符流的桥梁：使用指定的  charset 读取字节并将其解码为字符。每次调用 InputStreamReader 中的一个 read(); 方法，都会导致从底层输入流读取一个或多个字节。`

            字节 IO :
            InputStream in = new InputStream(fileName);
            OutputStream out = new FileOutputStream(fileName);

            字符 IO :
            FileWriter fileWriter = new FileWriter("example",true);     param1,文件名; param2,是否追加
            BufferedReader br = new BufferedReader(new FileReader(filePath)); param,文件路径
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filePath))); 三次传参，麻烦

            用 char 来转换读取出来的 ASCII 码
            StringBuffer sbf = new StringBuffer();
            FileReader fr - new FileReader(filePath);
            int i ;
            while((i = fr.read()) != -1) 循环， sbf.append(char(i));

            下载：
            URL url = new URL(IMAGE_URL); —— 建立 URL 链接
            InputStream in = url.openStream(); —— 从 URL 读取字节
            OutputStream out = new FileOutPutStream(“1.jpg”); —— 写入字节

            写文件时：注意 flush(); 方法的使用。一般在写文件的 循环中使用。用来保证每次内容不被覆盖。


### 例：

- FileWriter的方法：


                public class FileWriterDemo{
                	public static void main(String args[]){
                		//创建对象,传入一个true，表明不覆盖文件，在文件后面继续添加内容。
                		FileWriter fileWriter = null;
                		try{
                			fileWriter = new FileWriter("demo.txt",true);
                			fileWriter.write("hello");
                		}catch(IOException e){
                			System.out.println("catch:"+e.toString());
                		}finally{
                			try{
                				if(fileWriter!=null)
                					fileWriter.close();
                			}catch(Exception e){
                				System.out.println("----"+e.toString());
                			}
                		}
                	}
                }

-