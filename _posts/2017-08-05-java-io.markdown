---
layout:     post
title:      "Java Generic Types"
subtitle:   "泛型简介"
iframe:     ""
navcolor:   "invert"
author:     "Bonismo"
date:       2017-07-28
header-img: "img/java/hello-world-banner.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 泛型
    - 类型安全
    - 类型检查
    - 简化代码
---

### 流

- Java 可以对文件进行操作，以`流`的方式进行。

    `流`是 Java 内存中一组有序队列。Java 从源（网络、文件、键盘、硬盘）读入
    到内存中，这个过程就形成了`流`。

### IO

- input 输入

- output 输出

`简称 IO`

### 面向字节`[` Byte `]`、面向字符`[` Character `]`

- 面向字节 InputStream、OutputStream 及其所有子类 `以8为单位对二进制数据操作，对数据不转换`

- 面向字符 Reader、Writer 及其所有子类 `以字符为单位对数据进行操作，读的时候将二进制转换为字符，写的时候转为二进制数据`

### 面向输出方向 `方向相对程序而言`

- 输入 InputStream、Reader

- 输出 OutputStream、Writer

### Java IO 类图

<div>
    <img src="https://github.com/StayHungryStayFoolish/stayhungrystayfoolish.github.io/blob/master/img/java/io.png?raw=true"  />
</div>

`带 Buffer 的都是缓存输出、输入，效率高。`

`InputStreamReader 是字节通向字符流的桥梁：使用指定的  charset 读取字节并将其解码为字符。每次调用 InputStreamReader 中的一个 read(); 方法，都会导致从底层输入流读取一个或多个字节。`

            字节 IO :
            InputStream in = new InputStream(fileName);
            OutputStream out = new FileOutputStream(fileName);

            字符 IO :
            FileWriter fileWriter = new FileWriter("example",true);     param1,文件名; param2,是否追加
            BufferedReader br = new BufferedReader(new FileReader(filePath)); param,文件路径
            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filePath))); 三次传参，麻烦

            用 char 来转换读取出来的 ASCII 码
            StringBuffer sbf = new StringBuffer();
            FileReader fr - new FileReader(filePath);
            int i ;
            while((i = fr.read()) != -1) 循环， sbf.append(char(i));

            下载：
            URL url = new URL(IMAGE_URL); —— 建立 URL 链接
            InputStream in = url.openStream(); —— 从 URL 读取字节
            OutputStream out = new FileOutPutStream(“1.jpg”); —— 写入字节

            写文件时：注意 flush(); 方法的使用。一般在写文件的 循环中使用。用来保证每次内容不被覆盖。


### 例：

- FileWriter的方法：


                public class FileWriterDemo{
                	public static void main(String args[]){
                		//创建对象,传入一个true，表明不覆盖文件，在文件后面继续添加内容。
                		FileWriter fileWriter = null;
                		try{
                			fileWriter = new FileWriter("demo.txt",true);
                			fileWriter.write("hello");
                		}catch(IOException e){
                			System.out.println("catch:"+e.toString());
                		}finally{
                			try{
                				if(fileWriter!=null)
                					fileWriter.close();
                			}catch(Exception e){
                				System.out.println("----"+e.toString());
                			}
                		}
                	}
                }

- FileReader的方法 `两种`

        public class FileReaderDemo{
        	public static void main(String args[]){
        		String content = ReadByCharArray("demo.txt");
        		System.out.println(content);
        	}
        	//通过Read()方法来一个字符一个字符的读取
        	public static String ReadByOne(String fileName){
        		FileReader fileReader = null;
        		StringBuffer sb = null;
        		try{
        			fileReader = new FileReader(fileName);
        		    sb = new StringBuffer();
        			int ch = 0;
        			while((ch=fileReader.read())!=-1){
        				sb.append((char)ch);
        			}
        		}catch(IOException e){
        			System.out.println("catch:"+e.toString());
        		}finally{
        			try{
        				if(fileReader!=null)
        					fileReader.close();
        			}catch(Exception e){
        				System.out.println("----"+e.toString());
        			}
        		}
        		return sb.toString();
        	}
        	//通过read(char[] ch)方法来读取字符数组
        	public static String ReadByCharArray(String fileName){
        		FileReader fileReader = null;
        		String str = null;
        		try{
        			fileReader = new FileReader(fileName);
        			char[] ch = new char[1024];
        			int num = 0;
        			while((num=fileReader.read(ch))!=-1){
        				str = new String(ch,0,num);
        			}
        		}catch(IOException e){
        			System.out.println("catch:"+e.toString());
        		}finally{
        			try{
        				if(fileReader!=null)
        					fileReader.close();
        			}catch(Exception e){
        				System.out.println("----"+e.toString());
        			}
        		}
        		return str;
        	}
        }

- 带缓冲区的字符流BufferedReader及BufferedWriter的用法


        /**
        为了提高文件的读写效率，java封装一个BufferReader和bufferWriter类。
        作为文件的缓冲
        BufferReader：从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。
        BufferWriter: 将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。
        */
        import java.io.*;
        public class BufferedReaderDemo{
        	public static void main(String args[]){
        		boolean flag = copyByBuffered("demo.txt","buf.txt");
        		System.out.println("复制成功："+flag);
        	}
        	//通过ReadLine()方法来读取文件的一行数据
        	public static String ReadByReadLine(String fileName){
        		FileReader fileReader = null;
        		StringBuffer sb = null;
        		BufferedReader bufr = null;
        		try{
        			fileReader = new FileReader(fileName);
        		    bufr = new BufferedReader(fileReader);
        			sb = new StringBuffer();
        		   String line = null;
        			   while((line=bufr.readLine())!=null){
        					sb.append(line);
        			   }
        		}catch(IOException e){
        			System.out.println("catch:"+e.toString());
        		}finally{
        			try{
        				if(bufr!=null)
        					bufr.close();
        			}catch(Exception e){
        				System.out.println("----"+e.toString());
        			}
        		}
        		return sb.toString();
        	}
        	public static boolean copyByBuffered(String readFile,String writeFile){
        		boolean flag = false;
        		BufferedReader bufr = null;
        		BufferedWriter bufw = null;
        		try{
        			//定义BufferedReader缓冲区，读取文件流
        	        bufr = new BufferedReader(new FileReader(readFile));
        		//定义BufferedWriter缓冲区，向指定文件中写入。
        		    bufw = new BufferedWriter(new FileWriter(writeFile));
        		String line = null;
        			while((line=bufr.readLine())!=null){
        				bufw.write(line);
        				bufw.flush();
        				flag =true;
        			}
        		}catch(IOException e){
        			e.toString();
        		}finally{
        			try{
        				if(bufr!=null&&bufw!=null){
        					bufr.close();
        					bufw.close();
        				}
        			}catch(Exception e){
        			}
        		}
        		return flag;
        	}
        }

- 模拟BufferedReader中readLine()的实现方法


            /**
            自定义一个MyBufferedReader类，模拟其中的readLine()方法。
            一次读取一行数据，这个是基于read()方法来实现的。
            自定义实现原理：
            1、通过FileReader中的read()一个个读取文件中的字符。
            2、将读取的字符存到StringBuilder中。
            3、当读到\r时，不存入StringBuilder中，继续向下读取。
               当\n时返回字符串，
            4、为了简便，所有异常都抛出

            这种自定义类，称为装饰设计模式
            */
            import java.io.*;
            class myBufferedReader{
            	private FileReader fr;
            	public myBufferedReader(FileReader fr){
            		this.fr = fr;
            	}
            	public String myReadLine()throws IOException{
            		StringBuilder sb = new StringBuilder();
            		int ch = 0;
            		while((ch=fr.read())!=-1){
            			if(ch=='\r')
            				continue;
            			if(ch=='\n')
            				return sb.toString();
            			sb.append((char)ch);
            		}
            		if(sb.length()!=0)
            			return sb.toString();
            		//读取到最后，返回空
            		return null;
            	}
            	//关闭流
            	public void myClose()throws IOException{
            		fr.close();
            	}
            }
            public class MyBufferedReaderDemo{
            	public static void main(String args[])throws IOException{
            		myBufferedReader mbr = new myBufferedReader(new FileReader("demo.txt"));
            		String line = null;
            		while((line=mbr.myReadLine())!=null){
            			System.out.println(line);
            		}
            		mbr.myClose();
            	}
            }

- 模拟LineNumberReader中getLineNumber()的实现方法


            /**
            模拟一个带行号的文件读取缓冲区。
            实现思路：
            1、mySetLineNumber(int number)方法用于设置从第number开始计数。
            2、myGetLineNumber()获取读取文件的行号。
            3、定义一个public int number = 0;
            4、当遇到\n时，代表这行结束number++;
            */
            import java.io.*;
            class myLineNumber extends myBufferedReader{
            	private int number=0;
            	public myLineNumber(FileReader fr){
            		super(fr);
            	}
            	public void mySetLineNumber(int number){
            		this.number = number;
            	}
            	public int myGetLineNumber(){
            		return this.number;
            	}
            	public String myReadLine()throws IOException{
            		number++;
            		return super.myReadLine();
            	}
            }
            public class LineNumberDemo{
            	public static void main(String []args)throws IOException{
            		myLineNumber mln = new myLineNumber(new FileReader("FileReaderDemo.java"));
            		String line = null;
            		mln.mySetLineNumber(20);
            		while((line = mln.myReadLine())!=null){
            			System.out.println(mln.myGetLineNumber()+":"+line);
            		}
            	}
            }